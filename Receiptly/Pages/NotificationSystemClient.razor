@using Receiptly.Interface
@inject INotificationService NotificationService
@inject HttpClient Http

<h3>Past Notifications</h3>

<ul>
    @foreach (var notification in Shared.Cache.Local.NotificationHistory)
    {
        <li>@((MarkupString)notification)</li>
    }
</ul>

@code {
    
    private CancellationTokenSource? CancellationTokenSource { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Client initialized for polling.");
        CancellationTokenSource = new CancellationTokenSource();
        _ = PollNotificationsAsync();
        _ = UpdateLabelPeriodicallyAsync();
    }

    private async Task PollNotificationsAsync()
    {
        try
        {
            while (!CancellationTokenSource.Token.IsCancellationRequested)
            {
                var response = await Http.GetAsync("api/notifications", CancellationTokenSource.Token);
                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    var base64Message = await response.Content.ReadAsStringAsync(CancellationTokenSource.Token);
                    var decodedMessage = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(base64Message));

                    Shared.Cache.Local.NotificationHistory.Add((DateTime.Now.ToString("MM/dd/yyyy HH:mm")) + " : " + decodedMessage);
                    await NotificationService.NotifyAsync(decodedMessage);
                }

  
                await Task.Delay(30000, CancellationTokenSource.Token);
            }
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Polling stopped.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during polling: {ex.Message}");
        }
    }

    private async Task UpdateLabelPeriodicallyAsync()
    {
        while (!CancellationTokenSource.Token.IsCancellationRequested)
        {
            StateHasChanged(); 
            await Task.Delay(10000, CancellationTokenSource.Token);
        }
    }
}